openapi: 3.0.0
info:
  version: 1.0.0
  title: Fantasy Football API
  description: |
    # Введение
    Данное API реализует демо-версию футбольной менеджера, прогресс в котором зависит от реальных результатов футболистов.

    *Разработка API не завершена и находится в процессе дополнения. Некоторые запросы могут быть ещё не реализованы (501 Not Implemented).*

    # Аутентификация
    После успешного логина нужно сохранить полученные Access/Refresh токены.
    Все последующие запросы выполнять с заголовком **Authorization** формата:
    **Bearer *AccessToken***.

    Access токен имеет срок жизни (1 час по умолчанию). По истечении срока последующие запросы с этим токеном в заголовке будут возвращать 401 Unauthorized. Для продолжения работы с API необходимо получить новую пару Access/Refresh токенов передав Refresh токен с действующим сроком жизни (1 день по умолчанию). Если срок жизни Refresh токена истек - необходимо заново произвести авторизацию.



tags:
  - name: Auth
  - name: Users
  - name: Players
  - name: Teams
  - name: Admin

paths:

  ##################################################
  # Auth API
  ##################################################

  /api/v1/auth/signup:
    post:
      operationId: signUp
      summary: Регистрация нового пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"

  /api/v1/auth/login:
    post:
      operationId: login
      summary: Логин
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /api/v1/auth/refresh-token:
    post:
      operationId: refreshToken
      summary: Обновление пары токенов
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Token"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  ##################################################
  # Users API
  ##################################################

  /api/v1/users:
    get:
      operationId: getAllUsers
      summary: Получение списка пользователей
      security:
        - bearerAuth: []
      tags:
        - Users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/v1/users/current:
    get:
      operationId: getCurrentUser
      summary: Получение текущего пользователя
      security:
        - bearerAuth: []
      tags:
        - Users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"


  ##################################################
  # Players API
  ##################################################

  /api/v1/players:
    get:
      operationId: getAllPlayers
      summary: Получение списка игроков
      security:
        - bearerAuth: []
      tags:
        - Players
      parameters:
        - name: page
          in: query
          description: Номер страницы (используется для пагинации)
          schema:
            type: string
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Количество игроков на одной странице
          schema:
            type: string
            minimum: 10
            maximum: 30
            default: 10
        - name: search
          in: query
          description: Имя игрока (точное совпадение необязательно)
          schema:
            type: string
            minimum: 3
        - name: minAge
          in: query
          schema:
            type: integer
            format: int32
        - name: maxAge
          in: query
          schema:
            type: integer
            format: int32
        - name: nationality
          in: query
          description: Национальность игрока (точное совпадение обязательно)
          schema:
            type: string
        - name: minCost
          in: query
          schema:
            type: number
            format: double
        - name: maxCost
          in: query
          schema:
            type: number
            format: double
        - name: team
          in: query
          description: Id команды
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  players:
                    type: array
                    items:
                      $ref: "#/components/schemas/Player"
                  paging:
                    $ref: "#/components/schemas/Pagination"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"


  ##################################################
  # Users API
  ##################################################

  /api/v1/teams:
    get:
      operationId: getAllTeams
      summary: Получение списка команд
      security:
        - bearerAuth: []
      tags:
        - Teams
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
        "401":
          $ref: "#/components/responses/Unauthorized"

  ##################################################
  # Admin API
  ##################################################

  /api/v1/admin/players/update:
    post:
      operationId: updatePlayers
      summary: Обновление игроков в соотвествии с внешним API
      security:
        - bearerAuth: []
      tags:
        - Admin
      responses:
        "201":
          description: Created
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /api/v1/admin/teams/update:
    post:
      operationId: updateTeams
      summary: Обновление команд в соотвествии с внешним API
      security:
        - bearerAuth: []
      tags:
        - Admin
      responses:
        "201":
          description: Created
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

components:

  schemas:

    SignUpRequest:
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          example: "shelpen"
        password:
          type: string
          example: "zxc123"
        email:
          type: string
          format: email
          example: "shelpen123@gmail.com"

    LoginRequest:
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    User:
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        cash:
          type: number
          format: double
        role:
          $ref: "#/components/schemas/UserRole"
        createdAt:
          type: string
          format: "date-time"
        updatedAt:
          type: string
          format: "date-time"

    UserRole:
      type: string
      enum:
        - "USER"
        - "ADMIN"

    Player:
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        birthdate:
          type: string
          format: date
        nationality:
          type: string
        cost:
          type: number
          format: double
        height:
          type: string
        weight:
          type: string
        injured:
          type: boolean
        photo:
          type: string
        team:
          $ref: "#/components/schemas/Team"

    Pagination:
      properties:
        current:
          type: integer
          format: int32
        total:
          type: integer
          format: int32

    Team:
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        country:
          type: string
        founded:
          type: string
        logo:
          type: string

    Error:
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
          minimum: 100
          maximum: 600
        detail:
          type: string
        instance:
          type: string
          format: uri
        violations:
          type: array
          items:
            $ref: "#/components/schemas/Violation"

    Violation:
      properties:
        field:
          type: string
        message:
          type: string
    Token:
      required:
        - refreshToken
      properties:
        issuedAt:
          type: integer
          format: int64
        accessToken:
          type: string
        accessExpiresIn:
          type: integer
          format: int64
        refreshToken:
          type: string
        refreshExpiresIn:
          type: integer
          format: int64

  securitySchemes:

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:

    BadRequest:
      description: Request params or body validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Conflict:
      description: The request could not be completed due to a conflict with the current state
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden:
      description: Wrong permission to access this resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource could not be found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    ServiceUnavailable:
      description: Remote web server is temporarily unable to handle a request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Missing authorization information
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  parameters:

    UserIdPathParameter:
      in: path
      name: userId
      required: true
      schema:
        type: integer
        format: int64

    PlayerIdPathParameter:
      in: path
      name: playerId
      required: true
      schema:
        type: integer
        format: int64

    TeamIdPathParameter:
      in: path
      name: teamId
      required: true
      schema:
        type: integer
        format: int64